name: Test package
on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - main

jobs:
  # Runs main tests for the package.
  #
  # Runs on all events except when closing a pull request.
  test:
    name: Test package
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - "3.12"
          - "3.13"
        type:
          - test
        include:
          - os: ubuntu-latest
            python-version: "3.13"
            type: code style
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Update pip
        run: python -m pip install --upgrade pip
      # Tests
      - name: Install test dependencies
        if: ${{ matrix.type == 'test' }}
        run: python -m pip install . --group test
      - name: Check types
        if: ${{ matrix.type == 'test' && matrix.python-version != '3.14' }}
        run: pyright
      - name: Test package
        if: ${{ matrix.type == 'test' }}
        run: pytest -vv --showlocals --tb=short --color=yes --junit-xml=test-results.xml
      # Lint
      - name: Install lint dependencies
        if: ${{ matrix.type == 'code style' }}
        run: python -m pip install . --group lint
      - name: Check code style
        if: ${{ matrix.type == 'code style' }}
        run: pre-commit run -a

  # Builds python packages.
  #
  # Only runs on tag pushes.
  build:
    name: Build package
    if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    outputs:
      is-pre-release: ${{ steps.changelog.outputs.is-pre-release }}
      is-unreleased: ${{ steps.changelog.outputs.is-unreleased }}
      is-latest: ${{ steps.changelog.outputs.is-latest }}
      text: ${{ steps.changelog.outputs.text }}
      link: ${{ steps.metadata.outputs.link }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate release metadata
        id: metadata
        run: |
          ref="${{ github.ref }}";
          version=${ref#refs/tags/v};
          link="https://pypi.org/p/cl-keeper/${version}/";
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "link=${link}" >> $GITHUB_OUTPUT
      - name: Parse Changelog
        id: changelog
        uses: ./
        with:
          version: ${{ steps.metadata.outputs.version }}
          strict: true
      - name: Set up python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: 3.13
      - name: Install build
        run: |
          pip install build
      - name: Build project
        run: |
          python3 -m build .
      - name: Upload the build artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # Builds executables
  #
  # Only runs on tag pushes.
  nuitka-build:
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: 3.13
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: Install dependencies
        run: python -m pip install .
      - name: Build executable
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          script-name: cl_keeper
          onefile: true
          deployment: true
          output-file: chk-${{ runner.os }}
      - name: Upload the build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ runner.os }}
          path: |
            build/*.exe
            build/*.bin
            build/*.app/**/*
            build/*.dist/**/*
          include-hidden-files: true

  # Builds and publishes python packages.
  #
  # Only runs on tag pushes.
  publish_to_pypi:
    name: Publish package to PyPi
    needs:
      - test
      - build
    if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/cl-keeper
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: false
      - name: Download binary builds
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: build/
          merge-multiple: true
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ fromJSON(needs.build.outputs.is-pre-release) }}
          draft: ${{ fromJSON(needs.build.outputs.is-unreleased) }}
          body: |
            ## Changelog

            ${{ needs.build.outputs.text }}

            [See release on PyPi](${{ needs.build.outputs.link }})
          files: build/*

  # Updates pointers to v1 and v1.x branches.
  #
  # Only runs on tag pushes.
  update_release_branches:
    name: Update partial version branches
    needs:
      - build
      - publish_to_pypi
    if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') && fromJSON(needs.build.outputs.is-latest) }}
    runs-on: ubuntu-latest
    environment:
      name: release-anchors
    permissions:
      contents: write
    steps:
      - name: Export deploy key
        run: |
          mkdir ~/.ssh
          printenv DEPLOY_KEY > ~/.ssh/deploy_key
          chmod 400 ~/.ssh/deploy_key
          ssh-keygen -l -f ~/.ssh/deploy_key
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: 3.13
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: Install CI dependencies
        run: python -m pip install .
      - name: Update branches
        run: |
          git remote set-url origin git@github.com:taminomara/cl-keeper.git
          python scripts/update_branches --push ${{ github.event.ref }}
        env:
          GIT_SSH_COMMAND: "ssh -i ~/.ssh/deploy_key -o IdentitiesOnly=yes"

  # Try running the action in this repo.
  test_action:
    name: Test action
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run action
        id: action
        uses: ./
      - name: Print results
        run: |
          echo 'text=${{ steps.action.outputs.text }}'
          echo 'is-latest=${{ steps.action.outputs.is-latest }}'
          echo 'is-pre-release=${{ steps.action.outputs.is-pre-release }}'
          echo 'is-post-release=${{ steps.action.outputs.is-post-release }}'
          echo 'is-unreleased=${{ steps.action.outputs.is-unreleased }}'
          echo 'data=${{ steps.action.outputs.data }}'
